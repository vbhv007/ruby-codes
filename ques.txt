----------------------------------------------------------------------------------

Exercise-1: Count the ocurrences of various alphabet letters in an input string and store it in hash. Your ruby program should accept a string as an argument and display the hash as an output.

----------------------------------------------------------------------------------

Exercise-2: Ask user to enter text. Replace each vowel in the text with a '*' using regular expression. Your program should accept a string as an argument and output the replaced string

----------------------------------------------------------------------------------

Exercise-3: Write a program to print a Fibonacci series. Your program should accept a number input and output the Febonacci series. Make use of yield in your program

----------------------------------------------------------------------------------

Exercise-4: Output whether the input string is palindrome.

Add a method palindrome? in String class, so that it can be called as str.palindrome?, this method should return true / false

Input should be passed as a commend line argument.
* When string is Palindrome, output should be "Input string is a palindrome"
* When string is not Palindrome, output should be "Input string is not a palindrome"
* If no argument is passed(or blank string argument). output should be "Please provide an input"

----------------------------------------------------------------------------------

Exercise-5: Define a class Account with three three attributes "name","account_no" & "balance". Name and Balance should be set when creating an object of Account class, account_number should be auto increment. This Account class must have two methods, deposit() and withdraw().

Your program should take three arguments
1. customer one
2. customer two
3. transaction amount

Input Format:
Rahul:2000 Abhishek:3000 transfer:200

Output Format:
Account number: 1
Account holder name: Rahul
Account balance: 1800

Account number: 2
Account holder name: Abhishek
Account balance: 3200

----------------------------------------------------------------------------------

Exercise-6: Define a class named 'Vehicle' consisting of 'name','price' and methods for initializing and showing contents(overwrite to_s).
The 'price' of Vehicle may change over time.
Now create a subclass 'Bike' having 'dealer' and percent_price_increase and method to show its content. Initialize a Bike class object with certain values. Define a method price_increase which will increase the price.

Your program should accept command line input in this format: BikeName Price Dealer PercentPriceIncrease. Ex: BajajDiscover 58000 BaggaLink 12

output should be like:

Bike Name: BajajDiscover
Bike Price: 58000
Bike Dealer: BaggaLink

After 12.0 percent hike in price:
Bike Name: BajajDiscover
Bike Price: 64960.0
Bike Dealer: BaggaLink

----------------------------------------------------------------------------------

Exercise-7: Overwrite the default 'to_s' method such that it inverses the case of each letter.
Eg: "hello WORLD".to_s -> "HELLO world"

Your program should accept a string as an argument and print the output on standard output.

----------------------------------------------------------------------------------

Exercise-8: Define a method power() for an array. It takes an argument 'x' and returns the array with elements raised to power 'x'. Try to make use of array functions.

Your program should accept an array and the value of power from command line.
input example: ruby power_array.rb "[1,2,3,4]" 2
output example: [1, 4, 9, 16]

----------------------------------------------------------------------------------

Exercise-9: Create a method for Array that returns a hash having 'key' as length of the element and value as an array of all the elements of that length. Make use of Array#each.
Returned Hash should be sorted by key.

Your program should accept command line arguments.
Input argument: array-hash.rb "['abc','def',1234,234,'abcd','x','mnop',5,'zZzZ']"
output: {1=>["x", "5"], 3=>["abc", "def", "234"], 4=>["1234", "abcd", "mnop", "zZzZ"]}

----------------------------------------------------------------------------------

Exercise-12: Write a method that returns the no of various lowercase, uppercase, digits and special characters used in the string. Make use of Ranges.

----------------------------------------------------------------------------------

Exercise-13: Rewrite factorial method using ranges.
Your script should take a number from command line and output the result on standard output

----------------------------------------------------------------------------------

Exercise-14: Use string methods to reverse the words arrangement in a sentence.
Eg: "An apple a day keeps the doctor away" -> "away doctor the keeps day a apple An"

----------------------------------------------------------------------------------
