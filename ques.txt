----------------------------------------------------------------------------------

Exercise-1: Count the ocurrences of various alphabet letters in an input string and store it in hash. Your ruby program should accept a string as an argument and display the hash as an output.

----------------------------------------------------------------------------------

Exercise-2: Ask user to enter text. Replace each vowel in the text with a '*' using regular expression. Your program should accept a string as an argument and output the replaced string

----------------------------------------------------------------------------------

Exercise-3: Write a program to print a Fibonacci series. Your program should accept a number input and output the Febonacci series. Make use of yield in your program

----------------------------------------------------------------------------------

Exercise-4: Output whether the input string is palindrome.

Add a method palindrome? in String class, so that it can be called as str.palindrome?, this method should return true / false

Input should be passed as a commend line argument.
* When string is Palindrome, output should be "Input string is a palindrome"
* When string is not Palindrome, output should be "Input string is not a palindrome"
* If no argument is passed(or blank string argument). output should be "Please provide an input"

----------------------------------------------------------------------------------

Exercise-5: Define a class Account with three three attributes "name","account_no" & "balance". Name and Balance should be set when creating an object of Account class, account_number should be auto increment. This Account class must have two methods, deposit() and withdraw().

Your program should take three arguments
1. customer one
2. customer two
3. transaction amount

Input Format:
Rahul:2000 Abhishek:3000 transfer:200

Output Format:
Account number: 1
Account holder name: Rahul
Account balance: 1800

Account number: 2
Account holder name: Abhishek
Account balance: 3200

----------------------------------------------------------------------------------

Exercise-6: Define a class named 'Vehicle' consisting of 'name','price' and methods for initializing and showing contents(overwrite to_s).
The 'price' of Vehicle may change over time.
Now create a subclass 'Bike' having 'dealer' and percent_price_increase and method to show its content. Initialize a Bike class object with certain values. Define a method price_increase which will increase the price.

Your program should accept command line input in this format: BikeName Price Dealer PercentPriceIncrease. Ex: BajajDiscover 58000 BaggaLink 12

output should be like:

Bike Name: BajajDiscover
Bike Price: 58000
Bike Dealer: BaggaLink

After 12.0 percent hike in price:
Bike Name: BajajDiscover
Bike Price: 64960.0
Bike Dealer: BaggaLink

----------------------------------------------------------------------------------

Exercise-7: Overwrite the default 'to_s' method such that it inverses the case of each letter.
Eg: "hello WORLD".to_s -> "HELLO world"

Your program should accept a string as an argument and print the output on standard output.

----------------------------------------------------------------------------------

Exercise-8: Define a method power() for an array. It takes an argument 'x' and returns the array with elements raised to power 'x'. Try to make use of array functions.

Your program should accept an array and the value of power from command line.
input example: ruby power_array.rb "[1,2,3,4]" 2
output example: [1, 4, 9, 16]

----------------------------------------------------------------------------------

Exercise-9: Create a method for Array that returns a hash having 'key' as length of the element and value as an array of all the elements of that length. Make use of Array#each.
Returned Hash should be sorted by key.

Your program should accept command line arguments.
Input argument: array-hash.rb "['abc','def',1234,234,'abcd','x','mnop',5,'zZzZ']"
output: {1=>["x", "5"], 3=>["abc", "def", "234"], 4=>["1234", "abcd", "mnop", "zZzZ"]}

----------------------------------------------------------------------------------

Exercise-12: Write a method that returns the no of various lowercase, uppercase, digits and special characters used in the string. Make use of Ranges.

----------------------------------------------------------------------------------

Exercise-13: Rewrite factorial method using ranges.
Your script should take a number from command line and output the result on standard output

----------------------------------------------------------------------------------

Exercise-14: Use string methods to reverse the words arrangement in a sentence.
Eg: "An apple a day keeps the doctor away" -> "away doctor the keeps day a apple An"

----------------------------------------------------------------------------------

Exercise-15: Define a method to find all prime numbers upto n using 'step' function.

----------------------------------------------------------------------------------

Exercise-16: Write a search method that searches for a letter or word in a user input string and highlights the searched element. Also it should display the total no of searches found.

Eg: If user enters string to be searched as "Can you can a can as a canner can can a can?" and word to be searched is 'can' then output should be:
(Can) you (can) a (can) as a (can)ner (can) (can) a (can)?
Total Occurences found: 7

----------------------------------------------------------------------------------

Exercise-17: Write a method that sums up 2 24-hour time values(h:m:s). Validate the time using regular expressions.
Eg: ("0:45:34","0:15:58") -> 01:01:32 ; ("11:23:07","22:53:45") -> 1 day & 10:16:52

----------------------------------------------------------------------------------

Exercise-19: Modify the sum of times method for any number of time values passed to this method.
Eg: ("11:23:07","22:53:45","0:23:23","23:45:56") -> "2 day & 10:26:11"
("11:23:07") -> "11:23:07"

----------------------------------------------------------------------------------

Exercise-20:Create a class Interest that gives the user the difference in amount calculated simply and compoundedly. Initialise class with a block. 'p' and 't' are entered by user. Take 'r' = 10% pa.

----------------------------------------------------------------------------------

Exercise-21: Add exception handling for negative numbers in factorial program.

----------------------------------------------------------------------------------

Exercise-22: Create a class 'Name' with two attributes firstname and lastname. Neither of them can be blank and the first letter of firstname must be capital. Implement using 'raise'.

Try using custom Exceptions.

----------------------------------------------------------------------------------

Exercise-23:Read a CSV file:

Name, EmpId, Designation
Jack, 15, Developer
Mary, 13, Designer
John, 12, Developer
Jane, 17, Designer
Johny, 19, Tester

Save into another file in the format:

Designers
Mary (EmpId: 13)
Jane (EmpId: 17)

Developers
John (EmpId: 12)
Jack (EmpId: 15)

Tester
Johny (EmpId: 19)

  1.Listing should be in ascending order of Designation.
  2.Designation should be plural if it has more than one Employee.


----------------------------------------------------------------------------------

Reverse Iterate: Implement a reverse iteration function for Array such that I should be able to do this

[2,4,6,8].reverse_iterate { |i| print "#{i} "}

It would print 8 6 4 2

note: Do not use any existing iterator for this.

----------------------------------------------------------------------------------

Sales Tax Problem: Sales Tax Problem: You have to write a program in Ruby which would calculate the sales tax on the items according to the following conditions:

a. Flat 10 % sales tax is applicable on all items except for book, food and medicine
b. Additional Import Duty of 5 % is applicable on all imported items without any exceptions

The input to the program would be in the following format..

Name of the product: Chocolates
Imported?: yes
Exempted from sales tax? yes
Price: 120
Do you want to add more items to your list(y/n): y

Name of the product: Potato Chips
Imported?: no
Exempted from sales tax?: yes
Price: 100
Do you want to add more items to your list(y/n): y

Name of the product: Perfume
Imported?: yes
Exempted from sales tax? no
Price: 150
Do you want to add more items to your list(y/n): n

You have to generate a list that would display the list in a nice format and the grand total should be rounded to the nearest integer.

----------------------------------------------------------------------------------
